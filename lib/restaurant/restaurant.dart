
// lib/restaurant/restaurant.dart (unchanged, provided in prompt)
import 'package:hive/hive.dart';

part 'restaurant.g.dart'; // This will be generated by Hive

@HiveType(typeId: 0) // Ensure this typeId is unique across your Hive models
class Restaurant extends HiveObject {
  @HiveField(0)
  final String id;

  @HiveField(1)
  final String name;

  @HiveField(2)
  final String description;

  @HiveField(3)
  final String pictureId;

  @HiveField(4)
  final String city;

  @HiveField(5)
  final double rating;

  Restaurant({
    required this.id,
    required this.name,
    required this.description,
    required this.pictureId,
    required this.city,
    required this.rating,
  });

  factory Restaurant.fromJson(Map<String, dynamic> json) {
    return Restaurant(
      id: json['id'] as String,
      name: json['name'] as String,
      description: json['description'] as String,
      pictureId: json['pictureId'] as String,
      city: json['city'] as String,
      rating: (json['rating'] as num).toDouble(), // Parse as double
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'name': name,
      'description': description,
      'pictureId': pictureId,
      'city': city,
      'rating': rating,
    };
  }
}

// Optional: For handling detail response which might contain more fields
// This is an example if your detail API response has more fields like menus, reviews, etc.
// For the Dicoding API, the detail response has additional fields.
@HiveType(typeId: 1) // Ensure this typeId is unique
class RestaurantDetail extends Restaurant {
  @HiveField(6)
  final String address;

  @HiveField(7)
  final List<Category>? categories;

  @HiveField(8)
  final Menus? menus;

  @HiveField(9)
  final List<CustomerReview>? customerReviews;

  RestaurantDetail({
    required String id,
    required String name,
    required String description,
    required String pictureId,
    required String city,
    required double rating,
    required this.address,
    this.categories,
    this.menus,
    this.customerReviews,
  }) : super(
          id: id,
          name: name,
          description: description,
          pictureId: pictureId,
          city: city,
          rating: rating,
        );

  factory RestaurantDetail.fromJson(Map<String, dynamic> json) {
    return RestaurantDetail(
      id: json['id'] as String,
      name: json['name'] as String,
      description: json['description'] as String,
      pictureId: json['pictureId'] as String,
      city: json['city'] as String,
      rating: (json['rating'] as num).toDouble(),
      address: json['address'] as String? ?? '', // Detail API has address
      categories: (json['categories'] as List?)
          ?.map((e) => Category.fromJson(e as Map<String, dynamic>))
          .toList(),
      menus: json['menus'] != null ? Menus.fromJson(json['menus']) : null,
      customerReviews: (json['customerReviews'] as List?)
          ?.map((e) => CustomerReview.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  @override
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = super.toJson();
    data['address'] = address;
    data['categories'] = categories?.map((e) => e.toJson()).toList();
    data['menus'] = menus?.toJson();
    data['customerReviews'] = customerReviews?.map((e) => e.toJson()).toList();
    return data;
  }
}

@HiveType(typeId: 2)
class Category extends HiveObject {
  @HiveField(0)
  final String name;

  Category({required this.name});

  factory Category.fromJson(Map<String, dynamic> json) {
    return Category(
      name: json['name'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'name': name,
    };
  }
}

@HiveType(typeId: 3)
class Menus extends HiveObject {
  @HiveField(0)
  final List<MenuItem>? foods;

  @HiveField(1)
  final List<MenuItem>? drinks;

  Menus({this.foods, this.drinks});

  factory Menus.fromJson(Map<String, dynamic> json) {
    return Menus(
      foods: (json['foods'] as List?)
          ?.map((e) => MenuItem.fromJson(e as Map<String, dynamic>))
          .toList(),
      drinks: (json['drinks'] as List?)
          ?.map((e) => MenuItem.fromJson(e as Map<String, dynamic>))
          .toList(),
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'foods': foods?.map((e) => e.toJson()).toList(),
      'drinks': drinks?.map((e) => e.toJson()).toList(),
    };
  }
}

@HiveType(typeId: 4)
class MenuItem extends HiveObject {
  @HiveField(0)
  final String name;

  MenuItem({required this.name});

  factory MenuItem.fromJson(Map<String, dynamic> json) {
    return MenuItem(
      name: json['name'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'name': name,
    };
  }
}

@HiveType(typeId: 5)
class CustomerReview extends HiveObject {
  @HiveField(0)
  final String name;

  @HiveField(1)
  final String review;

  @HiveField(2)
  final String date;

  CustomerReview({
    required this.name,
    required this.review,
    required this.date,
  });

  factory CustomerReview.fromJson(Map<String, dynamic> json) {
    return CustomerReview(
      name: json['name'] as String,
      review: json['review'] as String,
      date: json['date'] as String,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'review': review,
      'date': date,
    };
  }
}